// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_FastMath_RCPPEXPORTS_H_GEN_
#define RCPP_FastMath_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace FastMath {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("FastMath", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("FastMath", "_FastMath_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in FastMath");
            }
        }
    }

    inline Rcpp::NumericMatrix pinv(Rcpp::NumericMatrix V, double tol = 1.e-6) {
        typedef SEXP(*Ptr_pinv)(SEXP,SEXP);
        static Ptr_pinv p_pinv = NULL;
        if (p_pinv == NULL) {
            validateSignature("Rcpp::NumericMatrix(*pinv)(Rcpp::NumericMatrix,double)");
            p_pinv = (Ptr_pinv)R_GetCCallable("FastMath", "_FastMath_pinv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pinv(Shield<SEXP>(Rcpp::wrap(V)), Shield<SEXP>(Rcpp::wrap(tol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

}

#endif // RCPP_FastMath_RCPPEXPORTS_H_GEN_
